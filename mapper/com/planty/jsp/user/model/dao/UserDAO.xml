<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserDAO">
	<resultMap type="com.planty.jsp.user.model.dto.UserDTO" id="userResultMap">
		<id property="id" column="ID"/>
		<result property="authNo" column="AUTH_NO"/>
		<result property="pwd" column="PWD"/>
		<result property="address" column="ADDRESS"/>
		<result property="addrDetail" column="ADDR_DETAIL"/>
		<result property="zipcode" column="ZIPCODE"/>
		<result property="name" column="NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="textYn" column="TEXT_YN"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="name" column="NAME"/>
		<result property="ceoName" column="CEO_NAME"/>
		<result property="reqNo" column="REQ_NO"/>
		<result property="approval" column="APPROVAL"/>	
		
		<association property="auth" resultMap="authResultMap"/>
	
	</resultMap>
	
	<resultMap type="com.planty.jsp.user.model.dto.AuthDTO" id="authResultMap">
		<id property="authNo" column="AUTH_NO"/>
		<result property="authName" column="AUTH_NAME"/>
	</resultMap>
		
		
	<!-- 일반회원 회원 가입-->
	<insert id="insertUser" parameterType="com.planty.jsp.user.model.dto.UserDTO">
        INSERT /* com.planty.jsp.user.model.dao.UserDAO#insertUser() */
          INTO MEMBER 
        (
          ID
        , AUTH_NO
        , PWD
        , ADDRESS
        , ADDR_DETAIL
        , ZIPCODE
        , PHONE
        , EMAIL
        , TEXT_YN
        , ENROLL_DATE
        , NAME
        )
        VALUES 
        (
          #{ id }
        , 1
        , #{ pwd }
        , #{ address }
        , #{ addrDetail }
        , #{ zipcode }
        , #{ phone }
        , #{ email }
        , #{ textYn }
        , SYSDATE
        , #{ name }
        )
	</insert>
	
	<!-- 암호화 처리된 비밀번호 조회용 메소드(로그인 확인용) -->
	<select id="selectEncryptedPwd" resultType="java.lang.String">
        SELECT /* com.planty.jsp.user.model.dao.UserDAO#selectEncryptedPwd() */
               PWD
          FROM MEMBER
         WHERE ID = #{ id }
	</select>
	
	<select id="selectLoginUser" resultMap="userResultMap">
		SELECT /* com.planty.jsp.user.model.dao.UserDAO#selectLoginUser() */
		       ID
	         , AUTH_NO
	         , ADDRESS
	         , ADDR_DETAIL
	         , ZIPCODE
	         , PHONE
	         , EMAIL
	         , TEXT_YN
	         , ENROLL_DATE
	         , NAME
		  FROM MEMBER
		 WHERE ID = #{ id }
	</select>
	
	<select id="userIdCheck" resultType="_int">
		 /* com.planty.jsp.user.model.dao.UserDAO#UserIdCheck() */
		SELECT
		       COUNT(*)
		  FROM MEMBER
		 WHERE ID = #{ id }
	</select>
	
	<update id="updateUser">
		UPDATE /* com.planty.jsp.user.model.dao.UserDAO#updateUser() */
		       MEMBER
		   SET ADDRESS = #{ address }
		     , ADDR_DETAIL = #{ addrDetail }
		     , ZIPCODE = #{ zipcode }
		     , PHONE = #{ phone }
		     , EMAIL = #{ email }
		 WHERE ID = #{ id }
	</update>
	
	<select id="selectChangedInfo" resultMap="userResultMap">
		SELECT /* com.planty.jsp.user.model.dao.UserDAO#selectChangedUserInfo() */
		       ID
	         , AUTH_NO
	         , ADDRESS
	         , ADDR_DETAIL
	         , ZIPCODE
	         , PHONE
	         , EMAIL
	         , TEXT_YN
	         , ENROLL_DATE
	         , NAME
		  FROM MEMBER
		 WHERE ID = #{ id }
	</select>
	
	<update id="updatePassword">
		UPDATE /* com.planty.jsp.user.model.dao.UserDAO#updateUserPassword() */
		       MEMBER
		   SET PWD = #{ pwd }
		 WHERE ID = #{ id }
	</update>
	
	<delete id="deleteUser">
	/* com.planty.jsp.user.model.dao.UserDAO#deleteUser() */		
		DELETE FROM MEMBER
		 WHERE ID = #{ id }
	</delete>	
	

	<!-- 회원 조회(관리자) -->
	<select id="selectAllUserList" resultMap="userResultMap">
	SELECT
			A.AUTH_NAME
		  , M.ID
		  , M.NAME
		  , M.EMAIL
		  , M.PHONE
      FROM MEMBER M
      JOIN AUTHORITY A ON (A.AUTH_NO = M.AUTH_NO)    
     WHERE M.AUTH_NO != 3  
	</select>
	

	<select id="findId" resultType="string">
		SELECT 
			   ID
		 FROM MEMBER 
		 WHERE NAME = #{name} 
		 AND EMAIL = #{email}

	</select>
	
	
	<select id="findUser" resultMap="userResultMap">
		SELECT 
			   ID
	         , AUTH_NO
	         , PWD
	         , ADDRESS
	         , ADDR_DETAIL
	         , ZIPCODE
	         , PHONE
	         , EMAIL
	         , TEXT_YN
	         , ENROLL_DATE
	         , NAME
		 FROM MEMBER 
		 WHERE ID = #{ id } 
		 AND EMAIL = #{email}
	</select>
	
	
</mapper>

